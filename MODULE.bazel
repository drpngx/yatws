module(
    name = "yatws",
    version = "0.1.3",
    compatibility_level = 1,
)

########## PYTHON
bazel_dep(name = "rules_python", version="1.0.0")
# This only configures the python used during build. Use `py_runtime` for the executable.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# This must be set to the system python version, because rules_rust uses the system python.
kPythonVersion = "3.12"
python.toolchain(python_version = kPythonVersion, is_default = True)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
# Merge it with requirements.txt into requirements_lock.txt
# bazel run requirements.update
pip.parse(
    hub_name = "yatws_pip_deps",
    python_version = kPythonVersion,
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "yatws_pip_deps")

########## RUST
bazel_dep(name = "rules_rust", version = "0.62.0")
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
# Pick one that works from here: https://releases.rs/
rust.toolchain(edition = "2021", versions = ["1.88.0"])
use_repo(rust, "rust_toolchains")
register_toolchains("@rust_toolchains//:all")
# To update, run `bazel run @rules_rust//tools/rust_analyzer:gen_rust_project`.
rust_analyzer = use_extension("@rules_rust//tools/rust_analyzer:deps.bzl", "rust")
rust_analyzer.rust_analyzer_dependencies()

# Required by crates_io_api.
crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")

crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//yatws:Cargo.toml"
    ],
)
use_repo(crate, "crates")
